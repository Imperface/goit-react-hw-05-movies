{"version":3,"file":"static/js/387.e625ba25.chunk.js","mappings":"ySACaA,EAAWC,EAAAA,QAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gIAKpB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAE,IAC5B,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAE,IAElCC,EAAWN,EAAAA,QAAAA,GAASO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,wMAGpB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAE,IACtB,SAAAF,GAAK,OAAIA,EAAMC,MAAMI,OAAOC,MAAM,IAO3CC,EAAiBV,EAAAA,QAAAA,IAAUW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,yE,SCmDxC,EAjEa,WACX,IAAQU,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA0CC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAA4BL,EAAAA,EAAAA,UAASM,EAAAA,EAAAA,MAAcC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAA5CG,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAyBxB,OAxBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAJ,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAUS,OAVTF,EAAAC,KAAA,EAEbJ,EAAU,CACdM,OAAQ,MACRC,IAAI,sCAADC,OAAwC3B,EAAO,YAClD4B,OAAQ,CAAEC,SAAU,QAASC,QAASC,EAAAA,GACtCC,QAAS,CACPC,OAAQ,qBAGZrB,EAAUH,EAAAA,EAAAA,SAAkBa,EAAAE,KAAA,EAGlBU,EAAAA,EAAAA,QAAcf,GAAS,KAAD,EAAAC,EAAAE,EAAAa,KADtBd,EAAID,EAAZgB,KAAQf,KAEVd,EAAiBc,GACjBT,EAAUH,EAAAA,EAAAA,UAAmBa,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,SAE7BV,EAAUH,EAAAA,EAAAA,UAAmB,yBAAAa,EAAAgB,OAAA,GAAApB,EAAA,mBAEhC,kBAnBmB,OAAAH,EAAAwB,MAAA,KAAAC,UAAA,KAoBpB1B,GACF,GAAG,CAACd,IAEAW,IAAWF,EAAAA,EAAAA,SACNgC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,IAEZ/B,IAAWF,EAAAA,EAAAA,UAEXgC,EAAAA,EAAAA,KAACE,EAAAA,GAAO,CAAAC,UACNH,EAAAA,EAAAA,KAACtD,EAAQ,CAAAyD,SACNtC,EAAcuC,OAAS,EACtBvC,EAAcwC,KAAI,SAAAC,GAAA,IAAGC,EAAYD,EAAZC,aAAcC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAAWC,EAAOJ,EAAPI,QAAO,OACzDC,EAAAA,EAAAA,MAAC1D,EAAQ,CAAAkD,SAAA,CACNI,IACCP,EAAAA,EAAAA,KAAC3C,EAAc,CACbuD,IAAG,kCAAA1B,OAAoCqB,GACvCM,IAAKL,EACLM,QAAQ,UAGZH,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EACEH,EAAAA,EAAAA,KAAA,KAAAG,SAAA,SAAAjB,OAAasB,MACbR,EAAAA,EAAAA,KAAA,KAAAG,SAAA,cAAAjB,OAAkBuB,UAVPC,EAYJ,KAGbV,EAAAA,EAAAA,KAAC/C,EAAQ,CAAAkD,UACPH,EAAAA,EAAAA,KAACe,EAAAA,GAAQ,CAACC,KAAK,iCAQvB9C,IAAWF,EAAAA,EAAAA,UACNgC,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,SADf,CAGF,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 0;\n  row-gap: ${props => props.theme.spacing(6)};\n  column-gap: ${props => props.theme.spacing(5)};\n`;\nexport const CastItem = styled.li`\n  width: 30%;\n  height: 500px;\n  padding: ${props => props.theme.spacing(5)};\n  background-color: ${props => props.theme.colors.cardBg};\n  border-radius: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n`;\nexport const CastProfileImg = styled.img`\n  width: 100%;\n  border-radius: 20px;\n\n  max-width: 250px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { statuses, API_KEY } from 'constants';\nimport axios from 'axios';\nimport { Error, Loader, NoResult, Section } from 'components';\nimport { CastItem, CastList, CastProfileImg } from './Cast.styled';\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCastData, setMovieCastData] = useState(null);\n  const [status, setStatus] = useState(statuses.IDLE);\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const options = {\n          method: 'GET',\n          url: `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n          params: { language: 'en-US', api_key: API_KEY },\n          headers: {\n            accept: 'application/json',\n          },\n        };\n        setStatus(statuses.PENDING);\n        const {\n          data: { cast },\n        } = await axios.request(options);\n        setMovieCastData(cast);\n        setStatus(statuses.RESOLVED);\n      } catch (error) {\n        setStatus(statuses.REJECTED);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  if (status === statuses.PENDING) {\n    return <Loader />;\n  }\n  if (status === statuses.RESOLVED) {\n    return (\n      <Section>\n        <CastList>\n          {movieCastData.length > 0 ? (\n            movieCastData.map(({ profile_path, name, character, cast_id }) => (\n              <CastItem key={cast_id}>\n                {profile_path && (\n                  <CastProfileImg\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                    loading=\"lazy\"\n                  />\n                )}\n                <div>\n                  <p>{`Name: ${name}`}</p>\n                  <p>{`Character: ${character}`}</p>\n                </div>\n              </CastItem>\n            ))\n          ) : (\n            <CastItem>\n              <NoResult text=\"No ingformation found.\" />\n            </CastItem>\n          )}\n        </CastList>\n      </Section>\n    );\n  }\n\n  if (status === statuses.REJECTED) {\n    return <Error />;\n  }\n};\nexport default Cast;\n"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","props","theme","spacing","CastItem","_templateObject2","colors","cardBg","CastProfileImg","_templateObject3","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieCastData","setMovieCastData","_useState3","statuses","_useState4","status","setStatus","useEffect","fetchMovieCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","options","_yield$axios$request","cast","_context","prev","next","method","url","concat","params","language","api_key","API_KEY","headers","accept","axios","sent","data","t0","stop","apply","arguments","_jsx","Loader","Section","children","length","map","_ref2","profile_path","name","character","cast_id","_jsxs","src","alt","loading","NoResult","text","Error"],"sourceRoot":""}